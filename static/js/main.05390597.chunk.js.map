{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["getData","url","a","fetch","method","mode","cache","headers","response","json","withRouter","props","query","URLSearchParams","useLocation","search","useState","location","get","level","onlyWithFreePlaces","filter","setFilter","isLoading","setIsLoading","levels","setLevels","locations","setLocations","courses","setCourses","filteredCourses","setFilteredCourses","getCourses","responseCourses","nodes","map","course","node","uniq","onChangeFilter","key","value","useEffect","length","history","push","found","Number","className","Grid","container","direction","spacing","item","InputLabel","Select","onChange","event","target","disabled","MenuItem","FormControlLabel","control","Checkbox","checked","label","Button","variant","onClick","LinearProgress","Nid","Address","href","Boolean","window","hostname","match","ReactDOM","render","StrictMode","exact","path","children","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.05390597.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { Course, ResponseCourses } from \"./interfaces\";\nimport {\n  Grid,\n  Button,\n  InputLabel,\n  Select,\n  MenuItem,\n  FormControlLabel,\n  Checkbox,\n  LinearProgress,\n} from \"@material-ui/core\";\nimport map from \"lodash/map\";\nimport uniq from \"lodash/uniq\";\nimport { useLocation, withRouter } from \"react-router-dom\";\nimport { History } from \"history\";\n\nasync function getData<T>(url: string): Promise<T> {\n  const response = await fetch(url, {\n    method: \"GET\",\n    mode: \"cors\",\n    cache: \"no-cache\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n  return response.json();\n}\n\ninterface Filter {\n  onlyWithFreePlaces: boolean;\n  level: string;\n  location: string;\n}\n\ninterface Props {\n  history: History;\n}\n\nfunction App(props: Props) {\n  const query = new URLSearchParams(useLocation().search);\n  const [filter, setFilter] = useState<Filter>({\n    location: query.get(\"location\") || \"Tallinn\",\n    level: query.get(\"level\") || \"A1\",\n    onlyWithFreePlaces: true,\n  });\n  const [isLoading, setIsLoading] = useState(true);\n  const [levels, setLevels] = useState<string[]>([]);\n  const [locations, setLocations] = useState<string[]>([]);\n  const [courses, setCourses] = useState<Course[]>([]);\n  const [filteredCourses, setFilteredCourses] = useState<Course[]>([]);\n\n  useEffect(() => {\n    if (courses.length === 0) {\n      getCourses();\n    }\n  }, [courses.length]);\n\n  useEffect(() => {\n    if (\n      query.get(\"location\") !== filter.location ||\n      query.get(\"level\") !== filter.level\n    ) {\n      props.history?.push(`?location=${filter.location}&level=${filter.level}`);\n    }\n  }, [filter.level, filter.location, props.history, query]);\n\n  useEffect(() => {\n    setFilteredCourses(\n      courses.filter((course) => {\n        let found = true;\n        if (found && filter.location) {\n          found = course[\"City/County\"] === filter.location;\n        }\n        if (found && filter.level) {\n          found = course[\"language course level\"] === filter.level;\n        }\n        if (found && filter.onlyWithFreePlaces) {\n          found =\n            Number(course[\"Main group no of places\"]) +\n              Number(course[\"Reserve group no of places\"]) >\n            Number(course[\"No of form Submissions\"]);\n        }\n        return found;\n      })\n    );\n  }, [courses, filter.level, filter.location, filter.onlyWithFreePlaces]);\n\n  async function getCourses() {\n    setIsLoading(true);\n    const responseCourses = await getData<ResponseCourses>(\n      \"https://api.allorigins.win/raw?url=https://integratsioon.ee/language-courses.json\"\n    );\n    const courses = responseCourses.nodes.map((course) => course.node);\n    setLocations(uniq(map(courses, \"City/County\")));\n    setLevels(uniq(map(courses, \"language course level\")));\n    setCourses(courses);\n    setIsLoading(false);\n  }\n\n  function onChangeFilter(key: string, value: unknown) {\n    setFilter({\n      ...filter,\n      [key]: value,\n    });\n  }\n\n  return (\n    <div className=\"App\">\n      <Grid container direction=\"row\" spacing={2}>\n        <Grid item>\n          <InputLabel>Locations</InputLabel>\n          <Select\n            value={filter.location}\n            onChange={(event) => onChangeFilter(\"location\", event.target.value)}\n            disabled={isLoading}\n          >\n            {locations?.map((location) => (\n              <MenuItem key={`location-${location}`} value={location}>\n                {location}\n              </MenuItem>\n            ))}\n          </Select>\n        </Grid>\n        <Grid item>\n          <InputLabel>Levels</InputLabel>\n          <Select\n            value={filter.level}\n            onChange={(event) => onChangeFilter(\"level\", event.target.value)}\n            disabled={isLoading}\n          >\n            {levels?.map((level) => (\n              <MenuItem key={`level-${level}`} value={level}>\n                {level}\n              </MenuItem>\n            ))}\n          </Select>\n        </Grid>\n        <Grid item>\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={filter.onlyWithFreePlaces}\n                onChange={(event) =>\n                  onChangeFilter(\"onlyWithFreePlaces\", event.target.checked)\n                }\n                disabled={isLoading}\n              />\n            }\n            label=\"Only with free places\"\n          />\n        </Grid>\n        <Grid item>\n          <Button\n            variant=\"contained\"\n            disabled={isLoading}\n            onClick={() => getCourses()}\n          >\n            Refresh\n          </Button>\n        </Grid>\n      </Grid>\n      {isLoading && <LinearProgress />}\n      <Grid container direction=\"column\" spacing={2}>\n        {filteredCourses?.map((course) => (\n          <Grid item key={course.Nid}>\n            <Grid item>\n              <b>{course[\"language course level\"]}</b> {course.Address}\n            </Grid>\n            <Grid item>\n              {course[\"course start\"]} - {course[\"course end\"]}\n            </Grid>\n            <Grid item>{course[\"Additional info\"]}</Grid>\n            <Grid item>{course[\"course description\"]}</Grid>\n            <Grid item>\n              No of form Submissions: {course[\"No of form Submissions\"]}\n            </Grid>\n            <Grid item>\n              Reserve group no of places: {course[\"Reserve group no of places\"]}\n            </Grid>\n            <Grid item>\n              Main group no of places: {course[\"Main group no of places\"]}\n            </Grid>\n            <Grid item>\n              {Number(course[\"Main group no of places\"]) +\n                Number(course[\"Reserve group no of places\"]) >\n              Number(course[\"No of form Submissions\"]) ? (\n                <Button\n                  variant=\"contained\"\n                  href={`https://integratsioon.ee${course[\"Button link\"]}`}\n                >\n                  Registration\n                </Button>\n              ) : (\n                <b>No free places</b>\n              )}\n            </Grid>\n          </Grid>\n        ))}\n      </Grid>\n    </div>\n  );\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <Route exact path=\"/\">\n        <App />\n      </Route>\n      <Route path=\"/:location/:level\" children={<App />} />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}