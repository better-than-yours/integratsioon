{"version":3,"sources":["components/Course.tsx","components/Filters.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Course","course","Grid","item","Address","Number","Button","variant","href","Filters","isLoading","locations","levels","filter","onChangeFilter","onRefresh","container","direction","spacing","InputLabel","Select","value","location","onChange","event","String","target","disabled","map","MenuItem","key","level","FormControlLabel","control","Checkbox","checked","onlyWithFreePlaces","label","onClick","getData","url","a","fetch","method","mode","cache","headers","response","json","withRouter","props","query","URLSearchParams","useLocation","search","useState","get","setFilter","setIsLoading","setLevels","setLocations","courses","setCourses","filteredCourses","setFilteredCourses","getCourses","responseCourses","nodes","node","uniq","useEffect","length","history","push","found","className","LinearProgress","Nid","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.faaacd30.chunk.js","sourcesContent":["import React from \"react\";\nimport { Grid, Button } from \"@material-ui/core\";\nimport { ICourse } from \"../interfaces\";\n\ninterface Props {\n  course: ICourse;\n}\n\nfunction Course({ course }: Props) {\n  return (\n    <Grid item>\n      <Grid item>\n        <b>{course[\"language course level\"]}</b> {course.Address}\n      </Grid>\n      <Grid item>\n        {course[\"course start\"]} - {course[\"course end\"]}\n      </Grid>\n      <Grid item>{course[\"Additional info\"]}</Grid>\n      <Grid item>{course[\"course description\"]}</Grid>\n      <Grid item>\n        No of form Submissions: {course[\"No of form Submissions\"]}\n      </Grid>\n      <Grid item>\n        Reserve group no of places: {course[\"Reserve group no of places\"]}\n      </Grid>\n      <Grid item>\n        Main group no of places: {course[\"Main group no of places\"]}\n      </Grid>\n      <Grid item>\n        {Number(course[\"Main group no of places\"]) +\n          Number(course[\"Reserve group no of places\"]) >\n        Number(course[\"No of form Submissions\"]) ? (\n          <Button\n            variant=\"contained\"\n            href={`https://integratsioon.ee${course[\"Button link\"]}`}\n          >\n            Registration\n          </Button>\n        ) : (\n          <b>No free places</b>\n        )}\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default Course;\n","import React from \"react\";\nimport {\n  Grid,\n  Button,\n  InputLabel,\n  Select,\n  MenuItem,\n  FormControlLabel,\n  Checkbox,\n} from \"@material-ui/core\";\nimport { IFilter } from \"../interfaces\";\n\ninterface Props {\n  isLoading: boolean;\n  locations: string[];\n  levels: string[];\n  filter: IFilter;\n  onChangeFilter: (key: string, value: string | boolean) => void;\n  onRefresh: () => void;\n}\n\nfunction Filters({\n  isLoading,\n  locations,\n  levels,\n  filter,\n  onChangeFilter,\n  onRefresh,\n}: Props) {\n  return (\n    <Grid container direction=\"row\" spacing={2}>\n      <Grid item>\n        <InputLabel>Locations</InputLabel>\n        <Select\n          value={filter.location}\n          onChange={(event) =>\n            onChangeFilter(\"location\", String(event.target.value))\n          }\n          disabled={isLoading}\n        >\n          {locations?.map((location) => (\n            <MenuItem key={`location-${location}`} value={location}>\n              {location}\n            </MenuItem>\n          ))}\n        </Select>\n      </Grid>\n      <Grid item>\n        <InputLabel>Levels</InputLabel>\n        <Select\n          value={filter.level}\n          onChange={(event) =>\n            onChangeFilter(\"level\", String(event.target.value))\n          }\n          disabled={isLoading}\n        >\n          {levels?.map((level) => (\n            <MenuItem key={`level-${level}`} value={level}>\n              {level}\n            </MenuItem>\n          ))}\n        </Select>\n      </Grid>\n      <Grid item>\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={filter.onlyWithFreePlaces}\n              onChange={(event) =>\n                onChangeFilter(\"onlyWithFreePlaces\", event.target.checked)\n              }\n              disabled={isLoading}\n            />\n          }\n          label=\"Only with free places\"\n        />\n      </Grid>\n      <Grid item>\n        <Button\n          variant=\"contained\"\n          disabled={isLoading}\n          onClick={() => onRefresh()}\n        >\n          Refresh\n        </Button>\n      </Grid>\n    </Grid>\n  );\n}\n\nexport default Filters;\n","import React, { useEffect, useState } from \"react\";\nimport { Grid, LinearProgress } from \"@material-ui/core\";\nimport map from \"lodash/map\";\nimport uniq from \"lodash/uniq\";\nimport { useLocation, withRouter } from \"react-router-dom\";\nimport { History } from \"history\";\nimport { ICourse, IResponseCourses, IFilter } from \"./interfaces\";\nimport Course from \"./components/Course\";\nimport Filters from \"./components/Filters\";\n\nasync function getData<T>(url: string): Promise<T> {\n  const response = await fetch(url, {\n    method: \"GET\",\n    mode: \"cors\",\n    cache: \"no-cache\",\n    headers: {\n      \"Content-Type\": \"application/json\",\n    },\n  });\n  return response.json();\n}\n\ninterface Props {\n  history: History;\n}\n\nfunction App(props: Props) {\n  const query = new URLSearchParams(useLocation().search);\n  const [filter, setFilter] = useState<IFilter>({\n    location: query.get(\"location\") || \"Tallinn\",\n    level: query.get(\"level\") || \"A1\",\n    onlyWithFreePlaces: true,\n  });\n  const [isLoading, setIsLoading] = useState(true);\n  const [levels, setLevels] = useState<string[]>([]);\n  const [locations, setLocations] = useState<string[]>([]);\n  const [courses, setCourses] = useState<ICourse[]>([]);\n  const [filteredCourses, setFilteredCourses] = useState<ICourse[]>([]);\n\n  useEffect(() => {\n    if (courses.length === 0) {\n      getCourses();\n    }\n  }, [courses.length]);\n\n  useEffect(() => {\n    if (\n      query.get(\"location\") !== filter.location ||\n      query.get(\"level\") !== filter.level\n    ) {\n      props.history?.push(`?location=${filter.location}&level=${filter.level}`);\n    }\n  }, [filter.level, filter.location, props.history, query]);\n\n  useEffect(() => {\n    setFilteredCourses(\n      courses.filter((course) => {\n        let found = true;\n        if (found && filter.location) {\n          found = course[\"City/County\"] === filter.location;\n        }\n        if (found && filter.level) {\n          found = course[\"language course level\"] === filter.level;\n        }\n        if (found && filter.onlyWithFreePlaces) {\n          found =\n            Number(course[\"Main group no of places\"]) +\n              Number(course[\"Reserve group no of places\"]) >\n            Number(course[\"No of form Submissions\"]);\n        }\n        return found;\n      })\n    );\n  }, [courses, filter.level, filter.location, filter.onlyWithFreePlaces]);\n\n  async function getCourses() {\n    setIsLoading(true);\n    const responseCourses = await getData<IResponseCourses>(\n      \"https://api.allorigins.win/raw?url=https://integratsioon.ee/language-courses.json\"\n    );\n    const courses = responseCourses.nodes.map((course) => course.node);\n    setLocations(uniq(map(courses, \"City/County\")));\n    setLevels(uniq(map(courses, \"language course level\")));\n    setCourses(courses);\n    setIsLoading(false);\n  }\n\n  function onChangeFilter(key: string, value: unknown) {\n    setFilter({\n      ...filter,\n      [key]: value,\n    });\n  }\n\n  return (\n    <div className=\"App\">\n      <Filters\n        isLoading={isLoading}\n        locations={locations}\n        levels={levels}\n        filter={filter}\n        onChangeFilter={onChangeFilter}\n        onRefresh={() => getCourses()}\n      />\n      {isLoading && <LinearProgress />}\n      <Grid container direction=\"column\" spacing={2}>\n        {filteredCourses?.map((course) => (\n          <Course key={course.Nid} course={course} />\n        ))}\n      </Grid>\n    </div>\n  );\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <Route>\n        <App />\n      </Route>\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}